name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate wrangler.toml for deployment
        run: |
          cat > wrangler.toml << EOF
          name = "${{ vars.WORKER_NAME }}"
          main = "src/worker.ts"
          compatibility_date = "2024-01-01"
          workers_dev = true
          account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"

          # KV Namespaces (at root level, not in site)
          kv_namespaces = [
            { binding = "SECRETS_KV", preview_id = "${{ secrets.KV_NAMESPACE_PREVIEW_ID }}", id = "${{ secrets.KV_NAMESPACE_ID }}" }
          ]

          # Static file serving configuration
          [site]
          bucket = "./public"

          # Environment Variables (non-sensitive)
          [vars]
          ALLOWED_ORIGINS = "${{ vars.ALLOWED_ORIGINS }}"

          # Production environment
          [env.production]
          name = "${{ vars.WORKER_NAME }}-prod"
          workers_dev = false

          [env.production.vars]
          ALLOWED_ORIGINS = "${{ vars.ALLOWED_ORIGINS_PROD || vars.ALLOWED_ORIGINS }}"

          # Staging environment
          [env.staging]
          name = "${{ vars.WORKER_NAME }}-staging"
          kv_namespaces = [
            { binding = "SECRETS_KV", id = "${{ secrets.KV_NAMESPACE_STAGING_ID || secrets.KV_NAMESPACE_ID }}" }
          ]

          [env.staging.vars]
          ALLOWED_ORIGINS = "${{ vars.ALLOWED_ORIGINS_STAGING || vars.ALLOWED_ORIGINS }}"
          EOF
          
          echo "‚úÖ Generated wrangler.toml for deployment with static file serving"
          echo "üìù Configuration preview:"
          echo "   Worker name: ${{ vars.WORKER_NAME }}"
          echo "   Production: ${{ vars.WORKER_NAME }}-prod"
          echo "   Staging: ${{ vars.WORKER_NAME }}-staging"
          echo "   Static files: ./public directory"
          echo "   KV namespace: ${{ secrets.KV_NAMESPACE_ID }}"
        shell: bash

      - name: Type check
        run: npm run type-check

      - name: Check staging configuration
        id: staging-check
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/staging'
        run: |
          if [ "${{ secrets.KV_NAMESPACE_STAGING_ID }}" != "" ]; then
            echo "staging-configured=true" >> $GITHUB_OUTPUT
          else
            echo "staging-configured=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Staging deployment skipped - KV_NAMESPACE_STAGING_ID not configured"
          fi
        shell: bash

      - name: Deploy to staging
        if: steps.staging-check.outputs.staging-configured == 'true'
        uses: cloudflare/wrangler-action@v3
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_STAGING_ID }}
          KV_NAMESPACE_PREVIEW_ID: ${{ secrets.KV_NAMESPACE_PREVIEW_ID }}
          ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS_STAGING || vars.ALLOWED_ORIGINS }}
          ALLOWED_ORIGINS_STAGING: ${{ vars.ALLOWED_ORIGINS_STAGING || vars.ALLOWED_ORIGINS }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET_STAGING }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        uses: cloudflare/wrangler-action@v3
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
          KV_NAMESPACE_PREVIEW_ID: ${{ secrets.KV_NAMESPACE_PREVIEW_ID }}
          ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS_PROD || vars.ALLOWED_ORIGINS }}
          ALLOWED_ORIGINS_PROD: ${{ vars.ALLOWED_ORIGINS_PROD || vars.ALLOWED_ORIGINS }}
          CSRF_SECRET: ${{ secrets.CSRF_SECRET_PRODUCTION }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production